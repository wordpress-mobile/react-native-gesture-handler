(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),i=(n(0),n(92)),l={id:"handlers",title:"Gesture Handlers"},b={unversionedId:"api/gesture-handlers/handlers",id:"api/gesture-handlers/handlers",isDocsHomePage:!1,title:"Gesture Handlers",description:"API",source:"@site/docs/api/gesture-handlers/handlers-unused.md",slug:"/api/gesture-handlers/handlers",permalink:"/react-native-gesture-handler/docs/api/gesture-handlers/handlers",editUrl:"https://github.com/software-mansion/react-native-gesture-handler/tree/master/docs/docs/api/gesture-handlers/handlers-unused.md",version:"current"},c=[{value:"API",id:"api",children:[{value:"<code>createNativeWrapper</code>",id:"createnativewrapper",children:[]}]}],o={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("p",null,"Here are a gesture recognizers currently available in the package:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TapGestureHandler")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"LongPressGestureHandler")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"PanGestureHandler")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"PinchGestureHandler")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RotationGestureHandler")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"FlingGestureHandler")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ForceTouchGestureHandler"))),Object(i.b)("p",null,"Whenever you use a native component that should handle touch events you can either wrap it with ",Object(i.b)("inlineCode",{parentName:"p"},"NativeViewGestureHandler")," or import wrapper component exported by the library instead of importing it from ",Object(i.b)("inlineCode",{parentName:"p"},"react-native")," package. Here is the list of available components:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ScrollView")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Switch")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TextInput")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DrawerLayoutAndroid")," (",Object(i.b)("strong",{parentName:"li"},"Android only"),")")),Object(i.b)("p",null,"Library exports a ",Object(i.b)("inlineCode",{parentName:"p"},"State")," object that provides a number of constants used to express the state of the handler. Here are the available constants:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"State.UNDETERMINED")," - default and initial state"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"State.FAILED")," - handler failed recognition of the gesture"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"State.BEGAN")," - handler has initiated recognition but have not enough data to tell if it has recognized or not"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"State.CANCELLED")," - handler has been cancelled because of other handler (or a system) stealing the touch stream"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"State.ACTIVE")," - handler has recognized"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"State.END")," - gesture has completed")),Object(i.b)("h4",{id:"common-gesturehandler-properties"},"Common ",Object(i.b)("inlineCode",{parentName:"h4"},"GestureHandler")," properties"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"id")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enabled")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"shouldCancelWhenOutside")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"simultaneousHandlers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"waitFor")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"hitSlop")," (",Object(i.b)("strong",{parentName:"li"},"accepts only negative values on iOS"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onGestureEvent")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onHandlerStateChange")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onBegan")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onFailed")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onCancelled")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onActivated")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onEnded"))),Object(i.b)("h4",{id:"tapgesturehandler-extra-properties"},Object(i.b)("inlineCode",{parentName:"h4"},"TapGestureHandler")," extra properties"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"maxDurationMs")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"maxDelayMs")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"numberOfTaps"))),Object(i.b)("h4",{id:"nativeviewgesturehandler-extra-properties"},Object(i.b)("inlineCode",{parentName:"h4"},"NativeViewGestureHandler")," extra properties"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"shouldActivateOnStart")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"disallowInterruption"))),Object(i.b)("h4",{id:"longpressgesturehandler-extra-properties"},Object(i.b)("inlineCode",{parentName:"h4"},"LongPressGestureHandler")," extra properties"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minDurationMs")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"maxDist"))),Object(i.b)("h4",{id:"pangesturehandler-extra-properties"},Object(i.b)("inlineCode",{parentName:"h4"},"PanGestureHandler")," extra properties"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minDeltaX")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minDeltaY")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"maxDeltaX")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"maxDeltaY")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minOffsetX")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minOffsetY")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minDist")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minVelocity")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minVelocityX")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minVelocityY")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"minPointers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"maxPointers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"avgTouches")," (",Object(i.b)("strong",{parentName:"li"},"Android only"),")")),Object(i.b)("h4",{id:"pinchgesturehandler"},Object(i.b)("inlineCode",{parentName:"h4"},"PinchGestureHandler")),Object(i.b)("h4",{id:"rotationgesturehandler"},Object(i.b)("inlineCode",{parentName:"h4"},"RotationGestureHandler")),Object(i.b)("h4",{id:"flinggesturehandler-extra-properties"},Object(i.b)("inlineCode",{parentName:"h4"},"FlingGestureHandler")," extra properties"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"direction")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"numberOfPointers"))),Object(i.b)("h3",{id:"createnativewrapper"},Object(i.b)("inlineCode",{parentName:"h3"},"createNativeWrapper")),Object(i.b)("p",null,"If you want to create a gesture handler wrapper for your own custom component, you can use this utility function. For example, if you want to use ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/react-native-community/react-native-slider"}),"Slider")," with gesture handler, then you can implement it like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const WrappedSlider = createNativeWrapper(Slider, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: true,\n  disallowInterruption: true,\n});\n")),Object(i.b)("p",null,"The second argument is a config object of type ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/master/react-native-gesture-handler.d.ts#L253"}),Object(i.b)("inlineCode",{parentName:"a"},"NativeViewGestureHandlerProperties"))," which accepts a list of properties you want to pass to the underlying gesture handler wrapper."))}p.isMDXComponent=!0},92:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),u=p(n),s=a,m=u["".concat(l,".").concat(s)]||u[s]||d[s]||i;return n?r.a.createElement(m,b(b({ref:t},o),{},{components:n})):r.a.createElement(m,b({ref:t},o))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=s;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:a,l[1]=b;for(var o=2;o<i;o++)l[o]=n[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);
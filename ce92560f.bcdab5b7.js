(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{83:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),i=(a(0),a(92)),o={id:"interactions",title:"Cross handler interactions",sidebar_label:"Cross handler interactions"},s={unversionedId:"interactions",id:"interactions",isDocsHomePage:!1,title:"Cross handler interactions",description:'Gesture handlers can "communicate" with each other to support complex gestures and control how they activate in certain scenarios.',source:"@site/docs/interactions.md",slug:"/interactions",permalink:"/react-native-gesture-handler/docs/interactions",editUrl:"https://github.com/software-mansion/react-native-gesture-handler/tree/master/docs/docs/interactions.md",version:"current",sidebar_label:"Cross handler interactions",sidebar:"docs",previous:{title:"Handler State",permalink:"/react-native-gesture-handler/docs/state"},next:{title:"Running Example App",permalink:"/react-native-gesture-handler/docs/example"}},c=[{value:"Simultaneous recognition",id:"simultaneous-recognition",children:[{value:"Use cases",id:"use-cases",children:[]},{value:"Example",id:"example",children:[]}]},{value:"Awaiting other handlers",id:"awaiting-other-handlers",children:[{value:"Use cases",id:"use-cases-1",children:[]},{value:"Example",id:"example-1",children:[]}]}],l={rightToc:c};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,'Gesture handlers can "communicate" with each other to support complex gestures and control how they ',Object(i.b)("em",{parentName:"p"},Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"/react-native-gesture-handler/docs/state#active"}),"activate"))," in certain scenarios."),Object(i.b)("p",null,"There are two means of achieving that described in the sections below.\nIn each case, it is necessary to provide a reference of one handler as a property to the other.\nGesture handler relies on ref objects created using ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://reactjs.org/docs/refs-and-the-dom.html"}),Object(i.b)("inlineCode",{parentName:"a"},"React.createRef()"))," and introduced in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://reactjs.org/blog/2018/03/29/react-v-16-3.html#createref-api"}),"React 16.3"),"."),Object(i.b)("h2",{id:"simultaneous-recognition"},"Simultaneous recognition"),Object(i.b)("p",null,"By default, only one gesture handler is allowed to be in the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#active"}),Object(i.b)("inlineCode",{parentName:"a"},"ACTIVE"))," state.\nSo when a gesture handler recognizes a gesture it ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#cancelled"}),"cancels")," all other handlers in the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#began"}),Object(i.b)("inlineCode",{parentName:"a"},"BEGAN"))," state and prevents any new handlers from receiving a stream of touch events as long as it remains ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#active"}),Object(i.b)("inlineCode",{parentName:"a"},"ACTIVE")),"."),Object(i.b)("p",null,"This behavior can be altered using the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"api/gesture-handlers/common-gh#simultaneousHandlers"}),Object(i.b)("inlineCode",{parentName:"a"},"simultaneousHandlers"))," property (available for all types of handlers).\nThis property accepts a ref or an array of refs to other handlers.\nHandlers connected in this way will be allowed to remain in the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#active"}),Object(i.b)("inlineCode",{parentName:"a"},"ACTIVE"))," state at the same time."),Object(i.b)("h3",{id:"use-cases"},"Use cases"),Object(i.b)("p",null,"Simultaneous recognition needs to be used when implementing a photo preview component that supports zooming (scaling) the photo, rotating and panning it while zoomed in.\nIn this case we would use a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"api/gesture-handlers/pinch-gh"}),Object(i.b)("inlineCode",{parentName:"a"},"PinchGestureHandler")),", ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"api/gesture-handlers/rotation-gh"}),Object(i.b)("inlineCode",{parentName:"a"},"RotationGestureHandler"))," and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"api/gesture-handlers/pan-gh"}),Object(i.b)("inlineCode",{parentName:"a"},"PanGestureHandler"))," that would have to simultaneously recognize gestures."),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("p",null,"See the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/master/examples/Example/src/scaleAndRotate/index.tsx"}),'"Scale, rotate & tilt" example')," from the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/example"}),"GestureHandler Example App")," or view it directly on your phone by visiting ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo"}),"our expo demo"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"class PinchableBox extends React.Component {\n  // ...take a look on full implementation in an Example app\n  render() {\n    const imagePinch = React.createRef();\n    const imageRotation = React.createRef();\n    return (\n      <RotationGestureHandler\n        ref={imageRotation}\n        simultaneousHandlers={imagePinch}\n        onGestureEvent={this._onRotateGestureEvent}\n        onHandlerStateChange={this._onRotateHandlerStateChange}>\n        <Animated.View>\n          <PinchGestureHandler\n            ref={imagePinch}\n            simultaneousHandlers={imageRotation}\n            onGestureEvent={this._onPinchGestureEvent}\n            onHandlerStateChange={this._onPinchHandlerStateChange}>\n            <Animated.View style={styles.container} collapsable={false}>\n              <Animated.Image\n                style={[\n                  styles.pinchableImage,\n                  {\n                    /* events-related transformations */\n                  },\n                ]}\n              />\n            </Animated.View>\n          </PinchGestureHandler>\n        </Animated.View>\n      </RotationGestureHandler>\n    );\n  }\n}\n")),Object(i.b)("h2",{id:"awaiting-other-handlers"},"Awaiting other handlers"),Object(i.b)("h3",{id:"use-cases-1"},"Use cases"),Object(i.b)("p",null,"A good example where awaiting is necessary is when we want to have single and double tap handlers registered for one view (a button).\nIn such a case we need to make single tap handler await a double tap.\nOtherwise if we try to perform a double tap the single tap handler will fire just after we hit the button for the first time, consequently ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/state#cancelled"}),"cancelling")," the double tap handler."),Object(i.b)("h3",{id:"example-1"},"Example"),Object(i.b)("p",null,"See the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/software-mansion/react-native-gesture-handler/blob/master/examples/Example/src/multitap/index.tsx"}),'"Multitap" example')," from ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/react-native-gesture-handler/docs/example"}),"GestureHandler Example App")," or view it directly on your phone by visiting ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo"}),"our expo demo"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const doubleTap = React.createRef();\nconst PressBox = () => (\n  <TapGestureHandler\n    onHandlerStateChange={({ nativeEvent }) =>\n      nativeEvent.state === State.ACTIVE && Alert.alert('Single tap!')\n    }\n    waitFor={doubleTap}>\n    <TapGestureHandler\n      ref={doubleTap}\n      onHandlerStateChange={({ nativeEvent }) =>\n        nativeEvent.state === State.ACTIVE && Alert.alert(\"You're so fast\")\n      }\n      numberOfTaps={2}>\n      <View style={styles.box} />\n    </TapGestureHandler>\n  </TapGestureHandler>\n);\n")))}p.isMDXComponent=!0},92:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(a),b=n,h=d["".concat(o,".").concat(b)]||d[b]||u[b]||i;return a?r.a.createElement(h,s(s({ref:t},l),{},{components:a})):r.a.createElement(h,s({ref:t},l))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);